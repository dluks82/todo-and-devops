# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Continuous Integration

# Secrets utilizados:
# - TELEGRAM_TOKEN: Token do bot do Telegram
# - TELEGRAM_CHANNEL_ID: ID do canal/grupo do Telegram
# - COOLIFY_WEBHOOK: URL do webhook para o Coolify
# - COOLIFY_TOKEN: Token de autentica√ß√£o para o Coolify
# - PRODUCTION_APP_URL: URL da aplica√ß√£o em produ√ß√£o

on:
  push:
    branches: [main, develop, 'feature/**']
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Permite execu√ß√£o manual

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-api
  NODE_VERSION: '20'

jobs:
  pipeline_start:
    name: In√≠cio da Pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Extrair informa√ß√µes do contexto
        id: context
        run: |
          # Determinar nome e URL corretos da branch
          BRANCH_NAME="${{ github.ref_name }}"
          BRANCH_URL="${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
            BRANCH_URL="${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "branch_url=$BRANCH_URL" >> $GITHUB_OUTPUT

          # Detectar tipo de pipeline
          IS_MAIN_DEPLOY="false"
          IS_PR="false"
          IS_FEATURE="false"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            IS_PR="true"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IS_MAIN_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            IS_DEVELOP="true"
          else
            IS_FEATURE="true"
          fi

          echo "is_main_deploy=$IS_MAIN_DEPLOY" >> $GITHUB_OUTPUT
          echo "is_pr=$IS_PR" >> $GITHUB_OUTPUT
          echo "is_feature=$IS_FEATURE" >> $GITHUB_OUTPUT

      - name: Notificar in√≠cio da pipeline
        # Usar o token do Telegram para enviar notifica√ß√£o
        # O aviso ocorre porque o analisador est√°tico n√£o sabe se o secret existe
        # Este coment√°rio ajuda a documentar o uso intencional
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üîÑ *Pipeline iniciada*

            ${{ github.event_name == 'pull_request' && format('*PR*: [#{0} ‚Äì {1}]({2})', github.event.pull_request.number, github.event.pull_request.title, github.event.pull_request.html_url) || '' }}
            *Branch*: [`${{ steps.context.outputs.branch_name }}`](${{ steps.context.outputs.branch_url }})
            *Autor*: ${{ github.actor }}

            [Ver Execu√ß√£o](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  validation:
    name: Valida√ß√£o de C√≥digo
    needs: [pipeline_start]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Verificar formata√ß√£o
        run: npm run format:check

      - name: Executar lint
        run: npm run lint

      - name: Notificar falha na valida√ß√£o
        if: failure()
        # Usar o token do Telegram para enviar notifica√ß√£o de erro
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ‚ùå *Valida√ß√£o de c√≥digo: Falha*

            ${{ github.event_name == 'pull_request' && format('*PR*: [#{0} ‚Äì {1}]({2})', github.event.pull_request.number, github.event.pull_request.title, github.event.pull_request.html_url) || '' }}
            *Branch*: [`${{ github.head_ref || github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref || github.ref_name }})
            *Autor*: ${{ github.actor }}

            ‚ö†Ô∏è Verifique problemas de formata√ß√£o ou lint.

            [Ver Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  test:
    name: Testes
    needs: [validation]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Extrair informa√ß√µes do contexto
        id: context
        run: |
          # Determinar nome e URL corretos da branch
          BRANCH_NAME="${{ github.ref_name }}"
          BRANCH_URL="${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
            BRANCH_URL="${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "branch_url=$BRANCH_URL" >> $GITHUB_OUTPUT

          # Informa√ß√µes do commit
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/$(git rev-parse HEAD)"
          echo "commit_short=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          echo "commit_url=$COMMIT_URL" >> $GITHUB_OUTPUT

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Executar testes
        run: npm test

      - name: Executar testes com cobertura
        run: npm run test:coverage

      - name: Salvar relat√≥rio de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-cobertura
          path: coverage/
          retention-days: 7

      - name: Extrair informa√ß√µes de cobertura
        id: coverage
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Link direto para o job "Testes"
          JOB_URL=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs?per_page=100" | \
            jq -r '.jobs[] | select(.name=="Testes") | .html_url' | head -n1)
          if [ -z "$JOB_URL" ] || [ "$JOB_URL" = "null" ]; then
            JOB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
          echo "job_url=$JOB_URL" >> $GITHUB_OUTPUT

          # Extrair % de cobertura do lcov.info de forma simples
          if [ -f coverage/lcov.info ]; then
            HITS=$(grep -h '^LH:' coverage/lcov.info | awk -F: '{s+=$2} END {print s+0}')
            FOUND=$(grep -h '^LF:' coverage/lcov.info | awk -F: '{s+=$2} END {print s+0}')
            if [ "${FOUND:-0}" -gt 0 ]; then
              PCT=$(awk -v h="$HITS" -v f="$FOUND" 'BEGIN { printf("%.1f", (h/f)*100) }')
              echo "percentage=$PCT" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Notificar Telegram - Testes com Sucesso
        if: success()
        # Usar o token do Telegram para enviar notifica√ß√£o de sucesso
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ‚úÖ *Testes Conclu√≠dos com Sucesso*

            *Branch*: [${{ steps.context.outputs.branch_name }}](${{ steps.context.outputs.branch_url }})
            *Commit*: [${{ steps.context.outputs.commit_short }}](${{ steps.context.outputs.commit_url }})

            üìä *Cobertura de Testes*: ${{ steps.coverage.outputs.percentage }}%

            [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Notificar falha dos testes
        if: failure()
        # Usar o token do Telegram para enviar notifica√ß√£o de falha
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ‚ùå *Testes: Falha*

            ${{ github.event_name == 'pull_request' && format('*PR*: [#{0} ‚Äì {1}]({2})', github.event.pull_request.number, github.event.pull_request.title, github.event.pull_request.html_url) || '' }}
            *Branch*: [`${{ github.head_ref || github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref || github.ref_name }})
            *Autor*: ${{ github.actor }}

            ‚ö†Ô∏è Verifique os logs para detalhes.

            [Ver logs do Job Testes](${{ steps.coverage.outputs.job_url }})

  security:
    name: Verifica√ß√£o de Seguran√ßa
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Verificar vulnerabilidades
        id: audit
        run: npm audit --omit=dev
        continue-on-error: true

      - name: Notificar problemas de seguran√ßa
        if: steps.audit.outcome == 'failure'
        # Usar o token do Telegram para enviar alerta de seguran√ßa
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ‚ö†Ô∏è *Alerta de Seguran√ßa*

            ${{ github.event_name == 'pull_request' && format('*PR*: [#{0} ‚Äì {1}]({2})', github.event.pull_request.number, github.event.pull_request.title, github.event.pull_request.html_url) || '' }}
            *Branch*: [`${{ github.head_ref || github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref || github.ref_name }})

            Foram encontradas vulnerabilidades nas depend√™ncias. 
            Recomendamos revisar as depend√™ncias e atualizar conforme necess√°rio.

            [Ver Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  build-and-push-image:
    name: Build e Push da Imagem Docker
    needs: [security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GitHub Container Registry
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair metadados para imagem Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch tags (ex.: main, develop)
            type=ref,event=branch
            # Short SHA tag
            type=sha,format=short
            # latest apenas no branch padr√£o (main)
            type=raw,value=latest,enable={{is_default_branch}}
            # Semver tags quando publicar tags v*
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=semver,pattern={{major}},event=tag

      - name: Build e (opcional) Push da imagem Docker
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: prod
          # S√≥ faz push em push para main/develop ou tags v*
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notificar constru√ß√£o da imagem
        if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
        # Usar o token do Telegram para enviar notifica√ß√£o da imagem
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üì¶ *Imagem Docker constru√≠da*

            *Branch*: [`${{ github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
            *Tags*: `${{ steps.meta.outputs.tags }}`

            A imagem foi constru√≠da e enviada para o GitHub Container Registry.

  deploy-coolify:
    name: Deploy no Coolify
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    permissions:
      contents: read
      actions: read
    steps:
      - name: Aguardar disponibilidade da imagem (curto)
        run: sleep 10
      - name: Acionar deploy no Coolify
        id: deploy
        # Usar o webhook e token do Coolify para realizar o deploy
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.COOLIFY_WEBHOOK }}" ]; then
            echo "COOLIFY_WEBHOOK n√£o configurado" >&2
            exit 1
          fi
          if [ -n "${{ secrets.COOLIFY_TOKEN }}" ]; then
            echo "::add-mask::${{ secrets.COOLIFY_TOKEN }}"
            echo "Disparando webhook (com Authorization)..."
            curl -sS -X GET "${{ secrets.COOLIFY_WEBHOOK }}" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
              --fail-with-body \
              -w "\nHTTP %{http_code}\n"
          else
            echo "Disparando webhook (sem Authorization)..."
            curl -sS -X GET "${{ secrets.COOLIFY_WEBHOOK }}" \
              --fail-with-body \
              -w "\nHTTP %{http_code}\n"
          fi

      - name: Notificar deploy realizado
        if: success()
        # Usar o token do Telegram para notifica√ß√£o de deploy
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üöÄ *Deploy Realizado com Sucesso*

            *Ambiente*: Coolify
            *Branch*: [`${{ github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
            *Autor*: ${{ github.actor }}
            *Produ√ß√£o*: ${{ secrets.PRODUCTION_APP_URL || '(defina secrets.PRODUCTION_APP_URL)' }}

            ‚úÖ A aplica√ß√£o foi implantada e est√° dispon√≠vel.

      - name: Notificar falha no deploy
        if: failure()
        # Usar o token do Telegram para notifica√ß√£o de falha no deploy
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            ‚ùå *Deploy Falhou*

            *Ambiente*: Coolify
            *Branch*: [`${{ github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
            *Autor*: ${{ github.actor }}
            *Produ√ß√£o*: ${{ secrets.PRODUCTION_APP_URL || '(defina secrets.PRODUCTION_APP_URL)' }}

            ‚ö†Ô∏è Houve um problema durante o deploy. Verifique os logs.

            [Ver Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  pipeline_summary:
    name: Resumo da Pipeline
    needs: [validation, test, security, build-and-push-image, deploy-coolify]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Extrair informa√ß√µes do contexto
        id: context
        run: |
          # Determinar nome e URL corretos da branch
          BRANCH_NAME="${{ github.ref_name }}"
          BRANCH_URL="${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
            BRANCH_URL="${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "branch_url=$BRANCH_URL" >> $GITHUB_OUTPUT

          # Determinar o status geral da pipeline
          if [[ "${{ needs.validation.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.build-and-push-image.result }}" == "success" && 
                ("${{ needs.deploy-coolify.result }}" == "success" || "${{ needs.deploy-coolify.result }}" == "skipped") ]]; then
            PIPELINE_STATUS="‚úÖ Sucesso"
          elif [[ "${{ needs.validation.result }}" == "cancelled" || 
                  "${{ needs.test.result }}" == "cancelled" || 
                  "${{ needs.security.result }}" == "cancelled" || 
                  "${{ needs.build-and-push-image.result }}" == "cancelled" || 
                  "${{ needs.deploy-coolify.result }}" == "cancelled" ]]; then
            PIPELINE_STATUS="‚ö†Ô∏è Cancelada"
          else
            PIPELINE_STATUS="‚ùå Falha"
          fi
          echo "pipeline_status=$PIPELINE_STATUS" >> $GITHUB_OUTPUT

      - name: Enviar Notifica√ß√£o Telegram - Resumo da Pipeline
        # Usar o token do Telegram para notifica√ß√£o de resumo
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            üìä *Resumo da Pipeline*

            *Branch*: [`${{ steps.context.outputs.branch_name }}`](${{ steps.context.outputs.branch_url }})
            *Status*: ${{ steps.context.outputs.pipeline_status }}

            *Detalhes dos Jobs:*
            üîç Valida√ß√£o: ${{ needs.validation.result }}
            üß™ Testes: ${{ needs.test.result }}
            üõ°Ô∏è Seguran√ßa: ${{ needs.security.result }}
            üèóÔ∏è Build da Imagem: ${{ needs.build-and-push-image.result }}
            üö¢ Deploy: ${{ needs.deploy-coolify.result }}

            [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
