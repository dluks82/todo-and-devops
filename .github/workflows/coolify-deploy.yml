name: Deploy com Coolify

on:
  # Deixa como fallback manual para evitar deploy duplicado
  workflow_dispatch:

concurrency:
  group: coolify-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy no Coolify (manual)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Acionar deploy no Coolify
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.COOLIFY_WEBHOOK }}" ]; then
            echo "COOLIFY_WEBHOOK não configurado" >&2
            exit 1
          fi
          if [ -n "${{ secrets.COOLIFY_TOKEN }}" ]; then
            echo "::add-mask::${{ secrets.COOLIFY_TOKEN }}"
            echo "Disparando webhook (com Authorization)..."
            curl -sS -X GET "${{ secrets.COOLIFY_WEBHOOK }}" \
              -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
              --fail-with-body \
              -w "\nHTTP %{http_code}\n"
          else
            echo "Disparando webhook (sem Authorization)..."
            curl -sS -X GET "${{ secrets.COOLIFY_WEBHOOK }}" \
              --fail-with-body \
              -w "\nHTTP %{http_code}\n"
          fi

      - name: Notificar deploy realizado
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            � *Deploy Manual Realizado com Sucesso*

            *Ambiente*: Coolify
            *Branch*: [`${{ github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }})
            *Autor*: ${{ github.actor }}
            *Produção*: ${{ secrets.PRODUCTION_APP_URL || '(defina secrets.PRODUCTION_APP_URL)' }}

            ✅ A aplicação foi implantada e está disponível.
